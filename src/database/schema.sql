CREATE TABLE IF NOT EXISTS conversation_history (
    conversation_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    user_id TEXT,
    timestamp INTEGER NOT NULL,
    sender TEXT NOT NULL,
    message_content TEXT NOT NULL,
    message_type TEXT,
    tool_info TEXT,
    context_snapshot_id TEXT,
    source_attribution_id TEXT,
    FOREIGN KEY (context_snapshot_id) REFERENCES context_information(context_id),
    FOREIGN KEY (source_attribution_id) REFERENCES source_attribution(attribution_id)
);

CREATE INDEX IF NOT EXISTS idx_conversation_history_conv_ts ON conversation_history (conversation_id, timestamp);
CREATE INDEX IF NOT EXISTS idx_conversation_history_agent_id ON conversation_history (agent_id);
CREATE INDEX IF NOT EXISTS idx_conversation_history_user_id ON conversation_history (user_id);

CREATE TABLE IF NOT EXISTS context_information (
    context_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    context_type TEXT NOT NULL,
    context_data TEXT NOT NULL,
    version INTEGER NOT NULL DEFAULT 1,
    parent_context_id TEXT,
    FOREIGN KEY (parent_context_id) REFERENCES context_information(context_id)
);

CREATE INDEX IF NOT EXISTS idx_context_information_agent_ts ON context_information (agent_id, timestamp);
CREATE INDEX IF NOT EXISTS idx_context_information_context_type ON context_information (context_type);

CREATE TABLE IF NOT EXISTS reference_keys (
    reference_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    key_type TEXT NOT NULL,
    key_value TEXT NOT NULL,
    description TEXT,
    timestamp INTEGER NOT NULL,
    associated_conversation_id TEXT
);

CREATE INDEX IF NOT EXISTS idx_reference_keys_agent_type_value ON reference_keys (agent_id, key_type, key_value);

CREATE TABLE IF NOT EXISTS source_attribution (
    attribution_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    source_type TEXT NOT NULL,
    source_uri TEXT,
    retrieval_timestamp INTEGER NOT NULL,
    content_summary TEXT,
    full_content_hash TEXT,
    full_content_json TEXT -- New column for full content
);

CREATE INDEX IF NOT EXISTS idx_source_attribution_agent_type_ts ON source_attribution (agent_id, source_type, retrieval_timestamp);

CREATE TABLE IF NOT EXISTS correction_logs (
    correction_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    correction_type TEXT NOT NULL,
    original_entry_id TEXT,
    original_value TEXT,
    corrected_value TEXT,
    reason TEXT,
    applied_automatically BOOLEAN NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_correction_logs_agent_ts ON correction_logs (agent_id, timestamp);
CREATE INDEX IF NOT EXISTS idx_correction_logs_type ON correction_logs (correction_type);

CREATE TABLE IF NOT EXISTS success_metrics (
    metric_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    metric_name TEXT NOT NULL,
    metric_value REAL NOT NULL,
    unit TEXT,
    associated_task_id TEXT,
    metadata TEXT
);

CREATE INDEX IF NOT EXISTS idx_success_metrics_agent_name_ts ON success_metrics (agent_id, metric_name, timestamp);

-- Knowledge Graph Tables
CREATE TABLE IF NOT EXISTS knowledge_graph_nodes (
    node_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    name TEXT NOT NULL,
    entity_type TEXT NOT NULL,
    observations TEXT, -- JSON string of observations
    timestamp INTEGER NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_kg_nodes_agent_id ON knowledge_graph_nodes (agent_id);
CREATE INDEX IF NOT EXISTS idx_kg_nodes_name ON knowledge_graph_nodes (name);
CREATE INDEX IF NOT EXISTS idx_kg_nodes_entity_type ON knowledge_graph_nodes (entity_type);

CREATE TABLE IF NOT EXISTS knowledge_graph_relations (
    relation_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    from_node_id TEXT NOT NULL,
    to_node_id TEXT NOT NULL,
    relation_type TEXT NOT NULL,
    timestamp INTEGER NOT NULL,
    FOREIGN KEY (from_node_id) REFERENCES knowledge_graph_nodes(node_id) ON DELETE CASCADE,
    FOREIGN KEY (to_node_id) REFERENCES knowledge_graph_nodes(node_id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_kg_relations_agent_id ON knowledge_graph_relations (agent_id);
CREATE INDEX IF NOT EXISTS idx_kg_relations_from_to ON knowledge_graph_relations (from_node_id, to_node_id);
CREATE INDEX IF NOT EXISTS idx_kg_relations_type ON knowledge_graph_relations (relation_type);

-- New table for Plans
CREATE TABLE IF NOT EXISTS plans (
    plan_id TEXT PRIMARY KEY,                   -- Unique ID for the plan (e.g., UUID generated by agent or server)
    agent_id TEXT NOT NULL,                     -- Scopes plan to an agent
    title TEXT NOT NULL,
    overall_goal TEXT,
    status TEXT NOT NULL DEFAULT 'DRAFT',       -- e.g., DRAFT, APPROVED, IN_PROGRESS, COMPLETED, HALTED, FAILED
    version INTEGER NOT NULL DEFAULT 1,
    creation_timestamp INTEGER NOT NULL,
    last_updated_timestamp INTEGER NOT NULL,
    refined_prompt_id_associated TEXT,        -- Optional: link to a refined prompt context
    analysis_report_id_referenced TEXT,       -- Optional: link to a code analysis report context
    metadata TEXT                               -- JSON blob for any other plan-level misc info
);

CREATE INDEX IF NOT EXISTS idx_plans_agent_id ON plans (agent_id);
CREATE INDEX IF NOT EXISTS idx_plans_agent_id_status ON plans (agent_id, status);

-- New table for Plan Tasks (previously plan_steps)
CREATE TABLE IF NOT EXISTS plan_tasks (
    task_id TEXT PRIMARY KEY,                   -- Unique ID for the task (e.g., UUID)
    plan_id TEXT NOT NULL,                      -- FK to plans.plan_id
    agent_id TEXT NOT NULL,                     -- Scopes task to an agent (denormalized for easier querying if needed)
    task_number INTEGER NOT NULL,               -- Order of the task in the plan
    title TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'PLANNED',     -- e.g., PLANNED, IN_PROGRESS, COMPLETED, FAILED, BLOCKED, SKIPPED
    purpose TEXT,
    action_description TEXT,
    files_involved TEXT,                        -- JSON array of strings
    dependencies_task_ids TEXT,               -- JSON array of task_ids this task depends on
    tools_required_list TEXT,                 -- JSON array of strings
    inputs_summary TEXT,
    outputs_summary TEXT,
    success_criteria_text TEXT,
    estimated_effort_hours REAL,
    assigned_to TEXT,
    verification_method TEXT,
    creation_timestamp INTEGER NOT NULL,
    last_updated_timestamp INTEGER NOT NULL,
    completion_timestamp INTEGER,               -- Timestamp when task was marked COMPLETED or FAILED
    notes TEXT,                                 -- JSON blob for task-specific notes or sub-results
    FOREIGN KEY (plan_id) REFERENCES plans(plan_id) ON DELETE CASCADE -- Ensures tasks are deleted if parent plan is deleted
);

CREATE INDEX IF NOT EXISTS idx_plan_tasks_plan_id ON plan_tasks (plan_id);
CREATE INDEX IF NOT EXISTS idx_plan_tasks_agent_id_status ON plan_tasks (agent_id, status);
CREATE INDEX IF NOT EXISTS idx_plan_tasks_plan_id_status ON plan_tasks (plan_id, status);

-- New table for Subtasks
CREATE TABLE IF NOT EXISTS subtasks (
    subtask_id TEXT PRIMARY KEY,                -- Unique ID for the subtask
    plan_id TEXT NOT NULL,                      -- FK to plans.plan_id
    parent_task_id TEXT,                        -- FK to plan_tasks.task_id (nullable, if subtask is directly under a plan)
    agent_id TEXT NOT NULL,                     -- Scopes subtask to an agent
    title TEXT NOT NULL,
    description TEXT,
    status TEXT NOT NULL DEFAULT 'PLANNED',     -- e.g., PLANNED, IN_PROGRESS, COMPLETED, FAILED, BLOCKED, SKIPPED
    creation_timestamp INTEGER NOT NULL,
    last_updated_timestamp INTEGER NOT NULL,
    completion_timestamp INTEGER,               -- Timestamp when subtask was marked COMPLETED or FAILED
    notes TEXT,                                 -- JSON blob for subtask-specific notes or sub-results
    FOREIGN KEY (plan_id) REFERENCES plans(plan_id) ON DELETE CASCADE,
    FOREIGN KEY (parent_task_id) REFERENCES plan_tasks(task_id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_subtasks_plan_id ON subtasks (plan_id);
CREATE INDEX IF NOT EXISTS idx_subtasks_parent_task_id ON subtasks (parent_task_id);
CREATE INDEX IF NOT EXISTS idx_subtasks_agent_id_status ON subtasks (agent_id, status);

-- New table for Refined Prompts
CREATE TABLE IF NOT EXISTS refined_prompts (
    refined_prompt_id TEXT PRIMARY KEY,
    agent_id TEXT NOT NULL,
    original_prompt_text TEXT NOT NULL,
    refinement_engine_model TEXT,
    refinement_timestamp INTEGER NOT NULL,
    overall_goal TEXT,
    decomposed_tasks TEXT, -- JSON array of strings
    key_entities_identified TEXT, -- JSON array of strings/objects
    implicit_assumptions_made_by_refiner TEXT, -- JSON array of strings
    explicit_constraints_from_prompt TEXT, -- JSON array of strings
    suggested_ai_role_for_agent TEXT,
    suggested_reasoning_strategy_for_agent TEXT,
    desired_output_characteristics_inferred TEXT, -- JSON object
    suggested_context_analysis_for_agent TEXT, -- JSON array of objects
    confidence_in_refinement_score TEXT,
    refinement_error_message TEXT,
    FOREIGN KEY (agent_id) REFERENCES agents(agent_id) -- Assuming an 'agents' table exists or will exist
);

CREATE INDEX IF NOT EXISTS idx_refined_prompts_agent_id ON refined_prompts (agent_id);
CREATE INDEX IF NOT EXISTS idx_refined_prompts_timestamp ON refined_prompts (refinement_timestamp);

-- New table for Agents
CREATE TABLE IF NOT EXISTS agents (
    agent_id TEXT PRIMARY KEY,
    name TEXT,
    description TEXT,
    creation_timestamp INTEGER NOT NULL
);
