import { MemoryManager } from '../database/memory_manager.js';
import { McpError, ErrorCode } from '@modelcontextprotocol/sdk/types.js';
import { validate, schemas } from '../utils/validation.js';
import { callTavilyApi } from '../integrations/tavily.js';

export const sourceAttributionToolDefinitions = [
    {
        name: 'log_source_attribution',
        description: 'Logs the origin of information used or generated by the AI agent.',
        inputSchema: {
            type: 'object',
            properties: {
                agent_id: { type: 'string', description: 'Identifier of the AI agent.' },
                source_type: { type: 'string', description: 'Type of source (e.g., user_input, tavily_search, internal_reasoning).' },
                source_uri: { type: 'string', description: 'URI or identifier of the source (e.g., URL for web, query for Tavily).', nullable: true },
                retrieval_timestamp: { type: 'number', description: 'Unix timestamp of when the information was retrieved.' },
                content_summary: { type: 'string', description: 'Brief summary of the attributed content.', nullable: true },
                full_content_hash: { type: 'string', description: 'Optional, hash of the full content for integrity checking.', nullable: true },
            },
            required: ['agent_id', 'source_type', 'retrieval_timestamp'],
        },
    },
    {
        name: 'get_source_attributions',
        description: 'Retrieves source attributions for a given agent, optionally filtered by source type.',
        inputSchema: {
            type: 'object',
            properties: {
                agent_id: { type: 'string', description: 'Identifier of the AI agent.' },
                source_type: { type: 'string', description: 'Optional type of source to filter by.', nullable: true },
                limit: { type: 'number', description: 'Maximum number of attributions to retrieve.', default: 100 },
                offset: { type: 'number', description: 'Offset for pagination.', default: 0 },
            },
            required: ['agent_id'],
        },
    },
    {
        name: 'tavily_web_search',
        description: 'Performs a Tavily web search and returns results. Source attribution should be logged separately by the calling agent using the log_search_attribution tool.',
        inputSchema: {
            type: 'object',
            properties: {
                query: { type: 'string', description: 'The search query.' },
                search_depth: { type: 'string', enum: ['basic', 'advanced'], default: 'basic', description: 'Depth of the search.' },
                max_results: { type: 'number', default: 5, description: 'Maximum number of search results to return.' },
            },
            required: ['query'],
        },
    },
    {
        name: 'log_search_attribution',
        description: 'Logs the attribution details for a completed web search.',
        inputSchema: {
            type: 'object',
            properties: {
                agent_id: { type: 'string', description: 'Identifier of the AI agent that performed the search.' },
                query: { type: 'string', description: 'The original search query.' },
                search_results_summary: { type: 'string', description: 'A summary of the search results.', nullable: true },
                retrieval_timestamp: { type: 'number', description: 'Unix timestamp of when the search was performed.' },
                source_uri: { type: 'string', description: 'The URI of the search (e.g., the query string itself).', nullable: true },
                full_content_hash: { type: 'string', description: 'Optional hash of the full content for integrity checking.', nullable: true }
            },
            required: ['agent_id', 'query', 'retrieval_timestamp'],
        },
    },
];

export function getSourceAttributionToolHandlers(memoryManager: MemoryManager) {
    return {
        'log_source_attribution': async (args: any, agent_id: string) => {
            const validationResult = validate('sourceAttribution', args);
            if (!validationResult.valid) {
                throw new McpError(
                    ErrorCode.InvalidParams,
                    `Validation failed for tool log_source_attribution: ${JSON.stringify(validationResult.errors)}`
                );
            }
            const attrId = await memoryManager.logSourceAttribution(
                agent_id,
                args.source_type as string,
                args.source_uri as string | null,
                args.retrieval_timestamp as number,
                args.content_summary as string | null,
                args.full_content_hash as string | null
            );
            return { content: [{ type: 'text', text: `Source attribution logged with ID: ${attrId}` }] };
        },
        'get_source_attributions': async (args: any, agent_id: string) => {
            const attributions = await memoryManager.getSourceAttributions(
                agent_id,
                args.source_type as string | null,
                args.limit as number,
                args.offset as number
            );
            return { content: [{ type: 'text', text: JSON.stringify(attributions, null, 2) }] };
        },
        'tavily_web_search': async (args: any) => { // agent_id is not required for this tool
            const validationResult = validate('tavilySearch', args);
            if (!validationResult.valid) {
                throw new McpError(
                    ErrorCode.InvalidParams,
                    `Validation failed for tool tavily_web_search: ${JSON.stringify(validationResult.errors)}`
                );
            }
            const queryForTavily = args.query as string;
            const searchDepthForTavily = args.search_depth as 'basic' | 'advanced';
            const maxResultsForTavily = args.max_results as number;

            const tavilySearchResults = await callTavilyApi(
                queryForTavily,
                searchDepthForTavily,
                maxResultsForTavily
            );
            return { content: [{ type: 'text', text: JSON.stringify(tavilySearchResults, null, 2) }] };
        },
        'log_search_attribution': async (args: any, agent_id: string) => {
            const validationResult = validate('sourceAttribution', {
                agent_id: args.agent_id,
                source_type: 'tavily_search',
                source_uri: args.query,
                retrieval_timestamp: args.retrieval_timestamp,
                content_summary: args.search_results_summary,
                full_content_hash: args.full_content_hash
            });
            if (!validationResult.valid) {
                throw new McpError(
                    ErrorCode.InvalidParams,
                    `Validation failed for tool log_search_attribution: ${JSON.stringify(validationResult.errors)}`
                );
            }
            const attributionSummary = args.search_results_summary as string | null;
            const retrievalTimestamp = args.retrieval_timestamp as number;
            const sourceUri = args.query as string;
            const fullContentHash = args.full_content_hash as string | null;
            const fullContentJson = args.full_content_json as string | null;

            const newAttrId = await memoryManager.logSourceAttribution(
                agent_id,
                'tavily_search',
                sourceUri,
                retrievalTimestamp,
                attributionSummary,
                fullContentHash,
                fullContentJson
            );
            return { content: [{ type: 'text', text: `Search attribution logged with ID: ${newAttrId}` }] };
        },
    };
}
